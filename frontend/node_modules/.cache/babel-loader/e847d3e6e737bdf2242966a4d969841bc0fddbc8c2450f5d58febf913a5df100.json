{"ast":null,"code":"var _jsxFileName = \"E:\\\\Games\\\\CrossMove\\\\frontend - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './components/GameBoard.css';\nimport { getBestMove, getBestMoveToMove } from './components/checking';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PLAYER = 'X';\nconst AI = 'O';\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(3).fill(null).map(() => Array(3).fill(null)));\n  const [playerMoves, setPlayerMoves] = useState(0);\n  const [aiMoves, setAiMoves] = useState(0);\n  const [phase, setPhase] = useState('place'); // 'place' or 'move'\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [status, setStatus] = useState('Your turn to place your coins!');\n  useEffect(() => {\n    checkGameStatus();\n  }, [board]);\n  const handlePlayerClick = (row, col) => {\n    if (phase === 'place') {\n      if (playerMoves < 3 && !board[row][col]) {\n        const newBoard = board.map((r, i) => r.map((c, j) => i === row && j === col ? PLAYER : c));\n        setBoard(newBoard);\n        setPlayerMoves(playerMoves + 1);\n        if (playerMoves + 1 === 3 && aiMoves === 3) {\n          setPhase('move');\n          setStatus('Select a coin to move!');\n        } else {\n          aiMove(newBoard);\n        }\n      }\n    } else if (phase === 'move') {\n      if (selectedPiece) {\n        if (selectedPiece.row === row && selectedPiece.col === col) {\n          setSelectedPiece(null);\n          setStatus('Select a coin to move!');\n        } else if (isValidMove(selectedPiece.row, selectedPiece.col, row, col)) {\n          const newBoard = board.map((r, i) => r.map((c, j) => i === selectedPiece.row && j === selectedPiece.col ? null : i === row && j === col ? PLAYER : c));\n          setBoard(newBoard);\n          setSelectedPiece(null);\n          aiMove(newBoard);\n        } else {\n          setStatus('Invalid move! Select again.');\n        }\n      } else if (board[row][col] === PLAYER) {\n        setSelectedPiece({\n          row,\n          col\n        });\n        setStatus('Select a destination.');\n      }\n    }\n  };\n  const aiMove = currentBoard => {\n    if (phase === 'place' && aiMoves < 3) {\n      const move = getBestMove(currentBoard, AI);\n      const newBoard = currentBoard.map((r, i) => r.map((c, j) => i === move.row && j === move.col ? AI : c));\n      setBoard(newBoard);\n      setAiMoves(aiMoves + 1);\n      if (playerMoves === 3 && aiMoves + 1 === 3) {\n        setPhase('move');\n        setStatus('Select a coin to move!');\n      }\n    } else if (phase === 'move') {\n      const move = getBestMoveToMove(currentBoard, AI);\n      if (move) {\n        const newBoard = currentBoard.map((r, i) => r.map((c, j) => i === move.from.row && j === move.from.col ? null : i === move.to.row && j === move.to.col ? AI : c));\n        setBoard(newBoard);\n      }\n    }\n  };\n  const isValidMove = (fromRow, fromCol, toRow, toCol) => {\n    const adjacent = getAdjacentCells(fromRow, fromCol);\n    return adjacent.some(([r, c]) => r === toRow && c === toCol && !board[r][c]);\n  };\n  const getAdjacentCells = (row, col) => {\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    if (row === 0 && col === 0 || row === 0 && col === 2 || row === 2 && col === 0 || row === 2 && col === 2) {\n      directions.push([1, 1]);\n    }\n    if (row === 1 && col === 1) {\n      directions.push([0, 0], [0, 2], [2, 0], [2, 2]);\n    }\n    return directions.map(([dr, dc]) => [row + dr, col + dc]).filter(([r, c]) => r >= 0 && r < 3 && c >= 0 && c < 3);\n  };\n  const checkGameStatus = () => {\n    const winner = checkWinner(board);\n    if (winner) {\n      setStatus(`${winner} wins!`);\n      setPhase('end');\n    }\n  };\n  const checkWinner = state => {\n    const lines = [[[0, 0], [0, 1], [0, 2]], [[1, 0], [1, 1], [1, 2]], [[2, 0], [2, 1], [2, 2]], [[0, 0], [1, 0], [2, 0]], [[0, 1], [1, 1], [2, 1]], [[0, 2], [1, 2], [2, 2]], [[0, 0], [1, 1], [2, 2]], [[0, 2], [1, 1], [2, 0]]];\n    for (const line of lines) {\n      const [a, b, c] = line;\n      if (state[a[0]][a[1]] && state[a[0]][a[1]] === state[b[0]][b[1]] && state[a[0]][a[1]] === state[c[0]][c[1]]) {\n        return state[a[0]][a[1]];\n      }\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Advanced Tic-Tac-Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell${cell ? ' taken' : ''}${(selectedPiece === null || selectedPiece === void 0 ? void 0 : selectedPiece.row) === rowIndex && (selectedPiece === null || selectedPiece === void 0 ? void 0 : selectedPiece.col) === colIndex ? ' selected' : ''}`,\n        onClick: () => handlePlayerClick(rowIndex, colIndex),\n        children: cell\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => window.location.reload(),\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j77i0EKQSi/ZcYu3DgXxZHmIv90=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getBestMove","getBestMoveToMove","jsxDEV","_jsxDEV","PLAYER","AI","App","_s","board","setBoard","Array","fill","map","playerMoves","setPlayerMoves","aiMoves","setAiMoves","phase","setPhase","selectedPiece","setSelectedPiece","status","setStatus","checkGameStatus","handlePlayerClick","row","col","newBoard","r","i","c","j","aiMove","isValidMove","currentBoard","move","from","to","fromRow","fromCol","toRow","toCol","adjacent","getAdjacentCells","some","directions","push","dr","dc","filter","winner","checkWinner","state","lines","line","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","rowIndex","cell","colIndex","onClick","window","location","reload","_c","$RefreshReg$"],"sources":["E:/Games/CrossMove/frontend - Copy/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './components/GameBoard.css';\r\nimport { getBestMove, getBestMoveToMove } from './components/checking';\r\n\r\nconst PLAYER = 'X';\r\nconst AI = 'O';\r\n\r\nfunction App() {\r\n  const [board, setBoard] = useState(Array(3).fill(null).map(() => Array(3).fill(null)));\r\n  const [playerMoves, setPlayerMoves] = useState(0);\r\n  const [aiMoves, setAiMoves] = useState(0);\r\n  const [phase, setPhase] = useState('place'); // 'place' or 'move'\r\n  const [selectedPiece, setSelectedPiece] = useState(null);\r\n  const [status, setStatus] = useState('Your turn to place your coins!');\r\n\r\n  useEffect(() => {\r\n    checkGameStatus();\r\n  }, [board]);\r\n\r\n  const handlePlayerClick = (row, col) => {\r\n    if (phase === 'place') {\r\n      if (playerMoves < 3 && !board[row][col]) {\r\n        const newBoard = board.map((r, i) => r.map((c, j) => (i === row && j === col ? PLAYER : c)));\r\n        setBoard(newBoard);\r\n        setPlayerMoves(playerMoves + 1);\r\n        if (playerMoves + 1 === 3 && aiMoves === 3) {\r\n          setPhase('move');\r\n          setStatus('Select a coin to move!');\r\n        } else {\r\n          aiMove(newBoard);\r\n        }\r\n      }\r\n    } else if (phase === 'move') {\r\n      if (selectedPiece) {\r\n        if (selectedPiece.row === row && selectedPiece.col === col) {\r\n          setSelectedPiece(null);\r\n          setStatus('Select a coin to move!');\r\n        } else if (isValidMove(selectedPiece.row, selectedPiece.col, row, col)) {\r\n          const newBoard = board.map((r, i) =>\r\n            r.map((c, j) => (i === selectedPiece.row && j === selectedPiece.col ? null : i === row && j === col ? PLAYER : c))\r\n          );\r\n          setBoard(newBoard);\r\n          setSelectedPiece(null);\r\n          aiMove(newBoard);\r\n        } else {\r\n          setStatus('Invalid move! Select again.');\r\n        }\r\n      } else if (board[row][col] === PLAYER) {\r\n        setSelectedPiece({ row, col });\r\n        setStatus('Select a destination.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const aiMove = (currentBoard) => {\r\n    if (phase === 'place' && aiMoves < 3) {\r\n      const move = getBestMove(currentBoard, AI);\r\n      const newBoard = currentBoard.map((r, i) =>\r\n        r.map((c, j) => (i === move.row && j === move.col ? AI : c))\r\n      );\r\n      setBoard(newBoard);\r\n      setAiMoves(aiMoves + 1);\r\n      if (playerMoves === 3 && aiMoves + 1 === 3) {\r\n        setPhase('move');\r\n        setStatus('Select a coin to move!');\r\n      }\r\n    } else if (phase === 'move') {\r\n      const move = getBestMoveToMove(currentBoard, AI);\r\n      if (move) {\r\n        const newBoard = currentBoard.map((r, i) =>\r\n          r.map((c, j) =>\r\n            i === move.from.row && j === move.from.col\r\n              ? null\r\n              : i === move.to.row && j === move.to.col\r\n              ? AI\r\n              : c\r\n          )\r\n        );\r\n        setBoard(newBoard);\r\n      }\r\n    }\r\n  };\r\n\r\n  const isValidMove = (fromRow, fromCol, toRow, toCol) => {\r\n    const adjacent = getAdjacentCells(fromRow, fromCol);\r\n    return adjacent.some(([r, c]) => r === toRow && c === toCol && !board[r][c]);\r\n  };\r\n\r\n  const getAdjacentCells = (row, col) => {\r\n    let directions = [\r\n      [-1, 0],\r\n      [1, 0],\r\n      [0, -1],\r\n      [0, 1],\r\n    ];\r\n\r\n    if ((row === 0 && col === 0) || (row === 0 && col === 2) || (row === 2 && col === 0) || (row === 2 && col === 2)) {\r\n      directions.push([1, 1]);\r\n    }\r\n\r\n    if (row === 1 && col === 1) {\r\n      directions.push([0, 0], [0, 2], [2, 0], [2, 2]);\r\n    }\r\n\r\n    return directions\r\n      .map(([dr, dc]) => [row + dr, col + dc])\r\n      .filter(([r, c]) => r >= 0 && r < 3 && c >= 0 && c < 3);\r\n  };\r\n\r\n  const checkGameStatus = () => {\r\n    const winner = checkWinner(board);\r\n    if (winner) {\r\n      setStatus(`${winner} wins!`);\r\n      setPhase('end');\r\n    }\r\n  };\r\n\r\n  const checkWinner = (state) => {\r\n    const lines = [\r\n      [\r\n        [0, 0],\r\n        [0, 1],\r\n        [0, 2],\r\n      ],\r\n      [\r\n        [1, 0],\r\n        [1, 1],\r\n        [1, 2],\r\n      ],\r\n      [\r\n        [2, 0],\r\n        [2, 1],\r\n        [2, 2],\r\n      ],\r\n      [\r\n        [0, 0],\r\n        [1, 0],\r\n        [2, 0],\r\n      ],\r\n      [\r\n        [0, 1],\r\n        [1, 1],\r\n        [2, 1],\r\n      ],\r\n      [\r\n        [0, 2],\r\n        [1, 2],\r\n        [2, 2],\r\n      ],\r\n      [\r\n        [0, 0],\r\n        [1, 1],\r\n        [2, 2],\r\n      ],\r\n      [\r\n        [0, 2],\r\n        [1, 1],\r\n        [2, 0],\r\n      ],\r\n    ];\r\n\r\n    for (const line of lines) {\r\n      const [a, b, c] = line;\r\n      if (\r\n        state[a[0]][a[1]] &&\r\n        state[a[0]][a[1]] === state[b[0]][b[1]] &&\r\n        state[a[0]][a[1]] === state[c[0]][c[1]]\r\n      ) {\r\n        return state[a[0]][a[1]];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Advanced Tic-Tac-Toe</h1>\r\n      <div id=\"status\">{status}</div>\r\n      <div className=\"board\">\r\n        {board.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => (\r\n            <div\r\n              key={`${rowIndex}-${colIndex}`}\r\n              className={`cell${cell ? ' taken' : ''}${\r\n                selectedPiece?.row === rowIndex && selectedPiece?.col === colIndex\r\n                  ? ' selected'\r\n                  : ''\r\n              }`}\r\n              onClick={() => handlePlayerClick(rowIndex, colIndex)}\r\n            >\r\n              {cell}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      <button onClick={() => window.location.reload()}>New Game</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}