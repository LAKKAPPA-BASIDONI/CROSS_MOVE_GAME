{"ast":null,"code":"// Sending Move Request (Placing a Piece)\nexport const fetchAiMove = async (row, col, phase) => {\n  const response = await fetch(\"http://localhost:8080/api/getBestMove\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(state)\n  });\n  return await response.json();\n  // Handle the response here (e.g., update UI with the new board state)\n};\n\n// Sending Move Request (Moving a Piece)\nexport const fetchAiToMove = async (fromRow, fromCol, toRow, toCol, phase) => {\n  const response = await fetch(\"http://localhost:8080/api/getBestMoveToMove\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(state)\n  });\n  return await response.json();\n  // Handle the response here (e.g., update UI with the new board state)\n};","map":{"version":3,"names":["fetchAiMove","row","col","phase","response","fetch","method","headers","body","JSON","stringify","state","json","fetchAiToMove","fromRow","fromCol","toRow","toCol"],"sources":["E:/Games/CrossMove/frontend - Copy/src/components/api.js"],"sourcesContent":["// Sending Move Request (Placing a Piece)\r\nexport const fetchAiMove = async (row, col, phase) => {\r\n    const response = await fetch(\"http://localhost:8080/api/getBestMove\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(state),\r\n    });\r\n  \r\n    return await response.json();\r\n    // Handle the response here (e.g., update UI with the new board state)\r\n  };\r\n  \r\n  // Sending Move Request (Moving a Piece)\r\n  export  const fetchAiToMove = async (fromRow, fromCol, toRow, toCol, phase) => {\r\n    const response = await fetch(\"http://localhost:8080/api/getBestMoveToMove\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(state),\r\n    });\r\n  \r\n    return await response.json();\r\n    // Handle the response here (e.g., update UI with the new board state)\r\n  };\r\n  \r\n  \r\n  "],"mappings":"AAAA;AACA,OAAO,MAAMA,WAAW,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAK;EAClD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;IACpEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,KAAK;EAC5B,CAAC,CAAC;EAEF,OAAO,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAC5B;AACF,CAAC;;AAED;AACA,OAAQ,MAAMC,aAAa,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEd,KAAK,KAAK;EAC7E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;IAC1EC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,KAAK;EAC5B,CAAC,CAAC;EAEF,OAAO,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAC5B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}