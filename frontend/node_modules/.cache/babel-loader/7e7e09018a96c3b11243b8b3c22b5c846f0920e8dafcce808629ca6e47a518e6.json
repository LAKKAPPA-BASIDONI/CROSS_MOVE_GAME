{"ast":null,"code":"var _jsxFileName = \"E:\\\\Games\\\\CrossMove\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GameBoard from './components/GameBoard.js';\nimport GameStatus from './GameStatus';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [status, setStatus] = useState('Game has not started yet.');\n  const [board, setBoard] = useState(Array(3).fill(Array(3).fill(null)));\n  useEffect(() => {\n    fetch('http://localhost:8080/game/start').then(response => response.text()).then(data => setStatus(data));\n  }, []);\n  const [isLoading, setIsLoading] = useState(false);\n  // In your React app (App.js)\n  const handleCellClick = async (row, col) => {\n    if (isLoading) return; // Prevent further moves if a move is already in progress\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(`http://localhost:8080/game/move?row=${row}&col=${col}&player=X`, {\n        method: 'GET'\n      });\n      const data = await response.json();\n      console.log(data.message); // Display move result\n      // Handle the response here (update UI accordingly)\n    } catch (error) {\n      console.error('Error during move:', error);\n    } finally {\n      setIsLoading(false); // Re-enable the button or allow next action\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Advanced Tic-Tac-Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameStatus, {\n      status: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      onCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IgUycScB9O9hZ0B7aFgvJOupxzg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","GameStatus","jsxDEV","_jsxDEV","App","_s","status","setStatus","board","setBoard","Array","fill","fetch","then","response","text","data","isLoading","setIsLoading","handleCellClick","row","col","method","json","console","log","message","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","_c","$RefreshReg$"],"sources":["E:/Games/CrossMove/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport GameBoard from './components/GameBoard.js';\r\nimport GameStatus from './GameStatus';\r\n\r\nfunction App() {\r\n  const [status, setStatus] = useState('Game has not started yet.');\r\n  const [board, setBoard] = useState(Array(3).fill(Array(3).fill(null)));\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:8080/game/start')\r\n      .then(response => response.text())\r\n      .then(data => setStatus(data));\r\n  }, []);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // In your React app (App.js)\r\n  const handleCellClick = async (row, col) => {\r\n    if (isLoading) return; // Prevent further moves if a move is already in progress\r\n  \r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/game/move?row=${row}&col=${col}&player=X`, {\r\n        method: 'GET',\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);  // Display move result\r\n      // Handle the response here (update UI accordingly)\r\n    } catch (error) {\r\n      console.error('Error during move:', error);\r\n    } finally {\r\n      setIsLoading(false); // Re-enable the button or allow next action\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Advanced Tic-Tac-Toe</h1>\r\n      <GameStatus status={status} />\r\n      <GameBoard board={board} onCellClick={handleCellClick} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,2BAA2B,CAAC;EACjE,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAEtEZ,SAAS,CAAC,MAAM;IACda,KAAK,CAAC,kCAAkC,CAAC,CACtCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIT,SAAS,CAACS,IAAI,CAAC,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD;EACA,MAAMqB,eAAe,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;IAC1C,IAAIJ,SAAS,EAAE,OAAO,CAAC;;IAEvBC,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMF,KAAK,CAAC,uCAAuCQ,GAAG,QAAQC,GAAG,WAAW,EAAE;QAC7FC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,MAAMN,IAAI,GAAG,MAAMF,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAACT,IAAI,CAACU,OAAO,CAAC,CAAC,CAAE;MAC5B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C,CAAC,SAAS;MACRT,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;EAED,oBACEf,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1B,OAAA;MAAA0B,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7B9B,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEA;IAAO;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9B9B,OAAA,CAACH,SAAS;MAACQ,KAAK,EAAEA,KAAM;MAAC0B,WAAW,EAAEf;IAAgB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV;AAAC5B,EAAA,CArCQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}