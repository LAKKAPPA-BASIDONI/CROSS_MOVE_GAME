{"ast":null,"code":"var _jsxFileName = \"E:\\\\Games\\\\CrossMove\\\\frontend - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './components/GameBoard.css';\n\n// Import your functions (for getBestMove, getBestMoveToMove) when available\nimport { getBestMove, getBestMoveToMove } from './components/checking';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(3).fill(null).map(() => Array(3).fill(null)));\n  const [playerMoves, setPlayerMoves] = useState(0);\n  const [aiMoves, setAiMoves] = useState(0);\n  const [phase, setPhase] = useState('place'); // 'place' or 'move'\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [status, setStatus] = useState('Your turn to place your coins!');\n  const PLAYER = 'X';\n  const AI = 'O';\n\n  // Initializes the board when the component mounts\n  useEffect(() => {\n    if (playerMoves === 3 && aiMoves === 3) {\n      setPhase('move');\n      setStatus('Select a coin to move!');\n    }\n  }, [playerMoves, aiMoves]);\n  const initBoard = () => {\n    return board.map((row, rowIndex) => row.map((cell, colIndex) => ({\n      row: rowIndex,\n      col: colIndex,\n      value: cell\n    })));\n  };\n  const handlePlayerClick = (row, col) => {\n    if (phase === 'place') {\n      if (playerMoves < 3 && !board[row][col]) {\n        const newBoard = [...board];\n        newBoard[row][col] = PLAYER;\n        setBoard(newBoard);\n        setPlayerMoves(playerMoves + 1);\n        checkGameStatus(newBoard);\n        aiMove(newBoard);\n      }\n    } else if (phase === 'move') {\n      if (selectedPiece) {\n        if (selectedPiece.row === row && selectedPiece.col === col) {\n          setSelectedPiece(null);\n          setStatus('Select a coin to move!');\n        } else if (isValidMove(selectedPiece.row, selectedPiece.col, row, col)) {\n          const newBoard = [...board];\n          newBoard[selectedPiece.row][selectedPiece.col] = null;\n          newBoard[row][col] = PLAYER;\n          setBoard(newBoard);\n          setSelectedPiece(null);\n          checkGameStatus(newBoard);\n          aiMove(newBoard);\n        } else {\n          setStatus('Invalid move! Select again.');\n        }\n      } else if (board[row][col] === PLAYER) {\n        setSelectedPiece({\n          row,\n          col\n        });\n        setStatus('Select a destination.');\n      }\n    }\n  };\n  const aiMove = currentBoard => {\n    if (phase === 'place' && aiMoves < 3) {\n      // Call the AI's move function (getBestMove)\n      const move = getBestMove(currentBoard, AI); // Pass AI as a parameter\n      const newBoard = [...currentBoard];\n      newBoard[move.row][move.col] = AI;\n      console.log('place :' + move.row);\n      console.log('place :' + move.col);\n      setBoard(newBoard);\n      setAiMoves(aiMoves + 1);\n      checkGameStatus(newBoard);\n    } else if (phase === 'move') {\n      // Call the AI's move function (getBestMoveToMove) to move one of its coins\n      const move = getBestMoveToMove(board, AI);\n      if (move) {\n        console.log('movet :' + move.to.row);\n        console.log('movet :' + move.to.col);\n        board[move.to.row][move.to.col] = AI;\n        board[move.from.row][move.from.col] = null;\n      }\n      setBoard(board);\n      checkGameStatus(board); // Check if there's a winner after the move\n      //}\n    }\n  };\n  const isValidMove = (fromRow, fromCol, toRow, toCol) => {\n    const adjacent = getAdjacentCells(fromRow, fromCol);\n    return adjacent.some(([r, c]) => r === toRow && c === toCol && !board[r][c]);\n  };\n  const getAdjacentCells = (row, col) => {\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1] // Cardinal directions\n    ];\n\n    // Map directions to new positions\n    directions = directions.map(([dr, dc]) => [row + dr, col + dc]);\n    if (row === 0 && col === 0 || row === 0 && col === 2 || row === 2 && col === 0 || row === 2 && col === 2) {\n      directions = directions.concat([[1, 1]]);\n    }\n    if (row === 1 && col === 1) {\n      directions = directions.concat([[0, 0], [0, 2], [2, 0], [2, 2]]);\n    }\n\n    // Filter positions to stay within a 3x3 grid\n    return directions.filter(([r, c]) => r >= 0 && r < 3 && c >= 0 && c < 3);\n  };\n  const checkGameStatus = currentBoard => {\n    const winner = checkWinner(currentBoard);\n    if (winner) {\n      setStatus(`${winner} wins!`);\n      document.querySelectorAll('.cell').forEach(cell => cell.classList.add('taken'));\n      setPhase('end'); // Prevent further moves\n    }\n  };\n  const checkWinner = state => {\n    const lines = [[[0, 0], [0, 1], [0, 2]], [[1, 0], [1, 1], [1, 2]], [[2, 0], [2, 1], [2, 2]], [[0, 0], [1, 0], [2, 0]], [[0, 1], [1, 1], [2, 1]], [[0, 2], [1, 2], [2, 2]], [[0, 0], [1, 1], [2, 2]], [[0, 2], [1, 1], [2, 0]]];\n    for (const line of lines) {\n      const [a, b, c] = line;\n      if (state[a[0]][a[1]] && state[a[0]][a[1]] === state[b[0]][b[1]] && state[a[0]][a[1]] === state[c[0]][c[1]]) {\n        return state[a[0]][a[1]];\n      }\n    }\n    return null;\n  };\n  const renderBoard = () => {\n    return board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `cell ${cell ? 'taken' : ''} ${selectedPiece && selectedPiece.row === rowIndex && selectedPiece.col === colIndex ? 'selected' : ''}`,\n      onClick: () => handlePlayerClick(rowIndex, colIndex),\n      children: cell || ''\n    }, `${rowIndex}-${colIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Advanced Tic-Tac-Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => window.location.reload(),\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j77i0EKQSi/ZcYu3DgXxZHmIv90=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getBestMove","getBestMoveToMove","jsxDEV","_jsxDEV","App","_s","board","setBoard","Array","fill","map","playerMoves","setPlayerMoves","aiMoves","setAiMoves","phase","setPhase","selectedPiece","setSelectedPiece","status","setStatus","PLAYER","AI","initBoard","row","rowIndex","cell","colIndex","col","value","handlePlayerClick","newBoard","checkGameStatus","aiMove","isValidMove","currentBoard","move","console","log","to","from","fromRow","fromCol","toRow","toCol","adjacent","getAdjacentCells","some","r","c","directions","dr","dc","concat","filter","winner","checkWinner","document","querySelectorAll","forEach","classList","add","state","lines","line","a","b","renderBoard","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","id","window","location","reload","_c","$RefreshReg$"],"sources":["E:/Games/CrossMove/frontend - Copy/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './components/GameBoard.css';\r\n\r\n// Import your functions (for getBestMove, getBestMoveToMove) when available\r\n import { getBestMove, getBestMoveToMove } from './components/checking'; \r\n\r\nfunction App() {\r\n  const [board, setBoard] = useState(Array(3).fill(null).map(() => Array(3).fill(null)));\r\n  const [playerMoves, setPlayerMoves] = useState(0);\r\n  const [aiMoves, setAiMoves] = useState(0);\r\n  const [phase, setPhase] = useState('place'); // 'place' or 'move'\r\n  const [selectedPiece, setSelectedPiece] = useState(null);\r\n  const [status, setStatus] = useState('Your turn to place your coins!');\r\n\r\n  const PLAYER = 'X';\r\n  const AI = 'O';\r\n  \r\n\r\n  // Initializes the board when the component mounts\r\n  useEffect(() => {\r\n    if (playerMoves === 3 && aiMoves === 3) {\r\n      setPhase('move');\r\n      setStatus('Select a coin to move!');\r\n    }\r\n  }, [playerMoves, aiMoves]);\r\n\r\n  const initBoard = () => {\r\n    return board.map((row, rowIndex) => row.map((cell, colIndex) => ({\r\n      row: rowIndex,\r\n      col: colIndex,\r\n      value: cell,\r\n    })));\r\n  };\r\n\r\n  const handlePlayerClick = (row, col) => {\r\n    if (phase === 'place') {\r\n      if (playerMoves < 3 && !board[row][col]) {\r\n        const newBoard = [...board];\r\n        newBoard[row][col] = PLAYER;\r\n        setBoard(newBoard);\r\n        setPlayerMoves(playerMoves + 1);\r\n        checkGameStatus(newBoard);\r\n        aiMove(newBoard);\r\n      }\r\n    } else if (phase === 'move') {\r\n      if (selectedPiece) {\r\n        if (selectedPiece.row === row && selectedPiece.col === col) {\r\n          setSelectedPiece(null);\r\n          setStatus('Select a coin to move!');\r\n        } else if (isValidMove(selectedPiece.row, selectedPiece.col, row, col)) {\r\n          const newBoard = [...board];\r\n          newBoard[selectedPiece.row][selectedPiece.col] = null;\r\n          newBoard[row][col] = PLAYER;\r\n          setBoard(newBoard);\r\n          setSelectedPiece(null);\r\n          checkGameStatus(newBoard);\r\n          aiMove(newBoard);\r\n        } else {\r\n          setStatus('Invalid move! Select again.');\r\n        }\r\n      } else if (board[row][col] === PLAYER) {\r\n        setSelectedPiece({ row, col });\r\n        setStatus('Select a destination.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const aiMove = (currentBoard) => {\r\n    if (phase === 'place' && aiMoves < 3) {\r\n      // Call the AI's move function (getBestMove)\r\n      const move = getBestMove(currentBoard, AI); // Pass AI as a parameter\r\n      const newBoard = [...currentBoard];\r\n      newBoard[move.row][move.col] = AI;\r\n      console.log('place :'+move.row)\r\n      console.log('place :'+move.col)\r\n      setBoard(newBoard);\r\n      setAiMoves(aiMoves + 1);\r\n      checkGameStatus(newBoard);\r\n    } else if (phase === 'move') {\r\n      // Call the AI's move function (getBestMoveToMove) to move one of its coins\r\n      const move = getBestMoveToMove(board, AI);\r\n                if (move) {\r\n                    console.log('movet :'+move.to.row)\r\n                    console.log('movet :'+move.to.col)\r\n                    board[move.to.row][move.to.col] = AI;\r\n                    board[move.from.row][move.from.col] = null;\r\n                }\r\n        \r\n  \r\n        setBoard(board);\r\n        checkGameStatus(board); // Check if there's a winner after the move\r\n      //}\r\n    }\r\n  };\r\n  \r\n\r\n  const isValidMove = (fromRow, fromCol, toRow, toCol) => {\r\n    const adjacent = getAdjacentCells(fromRow, fromCol);\r\n    return adjacent.some(([r, c]) => r === toRow && c === toCol && !board[r][c]);\r\n  };\r\n\r\n  const getAdjacentCells = (row, col) => {\r\n    let directions = [\r\n      [-1, 0], [1, 0], [0, -1], [0, 1], // Cardinal directions\r\n    ];\r\n\r\n    // Map directions to new positions\r\n    directions = directions.map(([dr, dc]) => [row + dr, col + dc]);\r\n    if (row === 0 && col === 0 || row === 0 && col === 2 || row === 2 && col === 0 || row === 2 && col === 2) {\r\n      directions = directions.concat([[1, 1]]);\r\n    }\r\n\r\n    if (row === 1 && col === 1) {\r\n      directions = directions.concat([[0, 0], [0, 2], [2, 0], [2, 2]]);\r\n    }\r\n\r\n    // Filter positions to stay within a 3x3 grid\r\n    return directions.filter(([r, c]) => r >= 0 && r < 3 && c >= 0 && c < 3);\r\n  };\r\n\r\n  const checkGameStatus = (currentBoard) => {\r\n    const winner = checkWinner(currentBoard);\r\n    if (winner) {\r\n      setStatus(`${winner} wins!`);\r\n      document.querySelectorAll('.cell').forEach(cell => cell.classList.add('taken'));\r\n      setPhase('end'); // Prevent further moves\r\n    }\r\n  };\r\n\r\n  const checkWinner = (state) => {\r\n    const lines = [\r\n      [[0, 0], [0, 1], [0, 2]],\r\n      [[1, 0], [1, 1], [1, 2]],\r\n      [[2, 0], [2, 1], [2, 2]],\r\n      [[0, 0], [1, 0], [2, 0]],\r\n      [[0, 1], [1, 1], [2, 1]],\r\n      [[0, 2], [1, 2], [2, 2]],\r\n      [[0, 0], [1, 1], [2, 2]],\r\n      [[0, 2], [1, 1], [2, 0]]\r\n    ];\r\n\r\n    for (const line of lines) {\r\n      const [a, b, c] = line;\r\n      if (state[a[0]][a[1]] && state[a[0]][a[1]] === state[b[0]][b[1]] && state[a[0]][a[1]] === state[c[0]][c[1]]) {\r\n        return state[a[0]][a[1]];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderBoard = () => {\r\n    return board.map((row, rowIndex) => row.map((cell, colIndex) => (\r\n      <div\r\n        key={`${rowIndex}-${colIndex}`}\r\n        className={`cell ${cell ? 'taken' : ''} ${selectedPiece && selectedPiece.row === rowIndex && selectedPiece.col === colIndex ? 'selected' : ''}`}\r\n        onClick={() => handlePlayerClick(rowIndex, colIndex)}\r\n      >\r\n        {cell || ''}\r\n      </div>\r\n    )));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Advanced Tic-Tac-Toe</h1>\r\n      <div id=\"status\">{status}</div>\r\n      <div className=\"board\">\r\n        {renderBoard()}\r\n      </div>\r\n      <button onClick={() => window.location.reload()}>New Game</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}