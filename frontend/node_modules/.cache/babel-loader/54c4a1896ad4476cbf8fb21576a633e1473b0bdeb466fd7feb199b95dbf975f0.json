{"ast":null,"code":"var _jsxFileName = \"E:\\\\Games\\\\CrossMove\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport GameStatus from \"./GameStatus\";\nimport { fetchAiMove, validateMove } from \"./utils/api\";\nimport { checkWinner } from \"./utils/validations\";\nimport { PLAYER, AI } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(Array(3).fill(null).map(() => Array(3).fill(null)));\n  const [phase, setPhase] = useState(\"place\");\n  const [playerMoves, setPlayerMoves] = useState(0);\n  const [aiMoves, setAiMoves] = useState(0);\n  const [status, setStatus] = useState(\"Your turn to place your coins!\");\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const handleCellClick = async (row, col) => {\n    if (phase === \"place\") {\n      if (playerMoves < 3 && !board[row][col]) {\n        const newBoard = board.map((r, i) => r.map((c, j) => i === row && j === col ? PLAYER : c));\n        setBoard(newBoard);\n        setPlayerMoves(playerMoves + 1);\n        setStatus(\"AI is thinking...\");\n        if (playerMoves + 1 === 3 && aiMoves === 3) {\n          setPhase(\"move\");\n          setStatus(\"Select a coin to move!\");\n        } else {\n          const aiMove = await fetchAiMove(newBoard, \"place\");\n          if (aiMove) {\n            newBoard[aiMove.row][aiMove.col] = AI;\n            setAiMoves(aiMoves + 1);\n            setBoard(newBoard);\n          }\n        }\n      }\n    } else if (phase === \"move\") {\n      if (selectedPiece) {\n        if (selectedPiece.row === row && selectedPiece.col === col) {\n          setSelectedPiece(null);\n          setStatus(\"Select a coin to move!\");\n        } else {\n          const isValid = await validateMove(selectedPiece, {\n            row,\n            col\n          }, board);\n          if (isValid) {\n            const newBoard = board.map((r, i) => r.map((c, j) => {\n              if (i === selectedPiece.row && j === selectedPiece.col) return null;\n              if (i === row && j === col) return PLAYER;\n              return c;\n            }));\n            setBoard(newBoard);\n            setSelectedPiece(null);\n            setStatus(\"AI is thinking...\");\n            const aiMove = await fetchAiMove(newBoard, \"move\");\n            if (aiMove) {\n              newBoard[aiMove.to.row][aiMove.to.col] = AI;\n              newBoard[aiMove.from.row][aiMove.from.col] = null;\n              setBoard(newBoard);\n            }\n          } else {\n            setStatus(\"Invalid move! Select again.\");\n          }\n        }\n      } else if (board[row][col] === PLAYER) {\n        setSelectedPiece({\n          row,\n          col\n        });\n        setStatus(\"Select a destination.\");\n      }\n    }\n  };\n  useEffect(() => {\n    const winner = checkWinner(board);\n    if (winner) {\n      setStatus(`${winner} wins!`);\n      setPhase(\"end\");\n    }\n  }, [board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Advanced Tic-Tac-Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameStatus, {\n      status: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board,\n      selectedPiece: selectedPiece,\n      handleCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => window.location.reload(),\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"MP5EVzzAGcsSK9FO4qAOm0rw1Fo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","GameStatus","fetchAiMove","validateMove","checkWinner","PLAYER","AI","jsxDEV","_jsxDEV","App","_s","board","setBoard","Array","fill","map","phase","setPhase","playerMoves","setPlayerMoves","aiMoves","setAiMoves","status","setStatus","selectedPiece","setSelectedPiece","handleCellClick","row","col","newBoard","r","i","c","j","aiMove","isValid","to","from","winner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","_c","$RefreshReg$"],"sources":["E:/Games/CrossMove/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport GameStatus from \"./GameStatus\";\r\nimport { fetchAiMove, validateMove } from \"./utils/api\";\r\nimport { checkWinner } from \"./utils/validations\";\r\nimport { PLAYER, AI } from \"./utils/constants\";\r\n\r\nconst App = () => {\r\n  const [board, setBoard] = useState(Array(3).fill(null).map(() => Array(3).fill(null)));\r\n  const [phase, setPhase] = useState(\"place\");\r\n  const [playerMoves, setPlayerMoves] = useState(0);\r\n  const [aiMoves, setAiMoves] = useState(0);\r\n  const [status, setStatus] = useState(\"Your turn to place your coins!\");\r\n  const [selectedPiece, setSelectedPiece] = useState(null);\r\n\r\n  const handleCellClick = async (row, col) => {\r\n    if (phase === \"place\") {\r\n      if (playerMoves < 3 && !board[row][col]) {\r\n        const newBoard = board.map((r, i) => r.map((c, j) => (i === row && j === col ? PLAYER : c)));\r\n        setBoard(newBoard);\r\n        setPlayerMoves(playerMoves + 1);\r\n        setStatus(\"AI is thinking...\");\r\n\r\n        if (playerMoves + 1 === 3 && aiMoves === 3) {\r\n          setPhase(\"move\");\r\n          setStatus(\"Select a coin to move!\");\r\n        } else {\r\n          const aiMove = await fetchAiMove(newBoard, \"place\");\r\n          if (aiMove) {\r\n            newBoard[aiMove.row][aiMove.col] = AI;\r\n            setAiMoves(aiMoves + 1);\r\n            setBoard(newBoard);\r\n          }\r\n        }\r\n      }\r\n    } else if (phase === \"move\") {\r\n      if (selectedPiece) {\r\n        if (selectedPiece.row === row && selectedPiece.col === col) {\r\n          setSelectedPiece(null);\r\n          setStatus(\"Select a coin to move!\");\r\n        } else {\r\n          const isValid = await validateMove(selectedPiece, { row, col }, board);\r\n          if (isValid) {\r\n            const newBoard = board.map((r, i) =>\r\n              r.map((c, j) => {\r\n                if (i === selectedPiece.row && j === selectedPiece.col) return null;\r\n                if (i === row && j === col) return PLAYER;\r\n                return c;\r\n              })\r\n            );\r\n            setBoard(newBoard);\r\n            setSelectedPiece(null);\r\n            setStatus(\"AI is thinking...\");\r\n            const aiMove = await fetchAiMove(newBoard, \"move\");\r\n            if (aiMove) {\r\n              newBoard[aiMove.to.row][aiMove.to.col] = AI;\r\n              newBoard[aiMove.from.row][aiMove.from.col] = null;\r\n              setBoard(newBoard);\r\n            }\r\n          } else {\r\n            setStatus(\"Invalid move! Select again.\");\r\n          }\r\n        }\r\n      } else if (board[row][col] === PLAYER) {\r\n        setSelectedPiece({ row, col });\r\n        setStatus(\"Select a destination.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const winner = checkWinner(board);\r\n    if (winner) {\r\n      setStatus(`${winner} wins!`);\r\n      setPhase(\"end\");\r\n    }\r\n  }, [board]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Advanced Tic-Tac-Toe</h1>\r\n      <GameStatus status={status} />\r\n      <GameBoard board={board} selectedPiece={selectedPiece} handleCellClick={handleCellClick} />\r\n      <button onClick={() => window.location.reload()}>New Game</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}